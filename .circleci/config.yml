version: 2.1


orbs:
  win: circleci/windows@2.2.0


workflows:
  build:
    jobs:
      - build-windows-pyinstaller-commercial


jobs:
  build-windows-pyinstaller-commercial:
    executor:
      name: win/default
      shell: bash.exe -e
    steps:
      - win-install-sys-deps:
          ffmpeg-version: ""
          gstreamer-version: "1.18.3"
          gvsbuild-tag: "af62cec"
          poetry-version: "1.1.4"
          qt-version: "5.15.2"
      - checkout
      - install-python-deps:
          install-dev-packages: true
          extras: "build resource_build windows"

commands:

  bash-add-to-path:
    parameters:
      path:
        type: string
    steps:
      - run:
          name: "Add << parameters.path >> to Bash PATH"
          command: |
            # Replace C: with /c
            NEW_PATH="<< parameters.path >>"
            NEW_BASH_PATH=${NEW_PATH/C:/\/c}
            QUOTED_PATH_VAR="\"PATH=${NEW_BASH_PATH}:${PATH}\""
            echo "export ${QUOTED_PATH_VAR}" >> ${BASH_ENV}

  install-python-deps:
    parameters:
      install-dev-packages:
        type: boolean
        default: false
      extras:
        description: "A space separated list of extras to install"
        type: string
        default: ""
    steps:
      - run:
          name: "Install Python dependencies with Poetry"
          command: |
              DEV_PACKAGES=$(( << parameters.install-dev-packages >> ? "" : "--no-dev" ))
              EXTRAS=$(( << parameters.extras >> ? "--extras \"<< parameters.extras >>\"" : ""))

              poetry install ${DEV_PACKAGES} ${EXTRAS}

  win-add-to-path:
    parameters:
      path:
        type: string
    steps:
      - run:
          name: "Add to Windows global Path"
          command: |
            # Accept paths with forward slashes
            $fmtPath = "<< parameters.path >>".Replace('/', '\')
            $newPath = "$fmtPath;$env:Path"

            [Environment]::SetEnvironmentVariable("Path", $newPath, [EnvironmentVariableTarget]::Machine)

            # Print saved value to be sure
            [Environment]::GetEnvironmentVariable("Path", [EnvironmentVariableTarget]::Machine)
          shell: powershell.exe
      - bash-add-to-path:
          # Add to bash PATH which doesn't seem to source from Windows global Path
          path: << parameters.path >>

  win-install-ffmpeg:
    parameters:
      ffmpeg-version:
        type: string
    steps:
      - run: echo 1

  win-install-gstreamer:
    parameters:
      gstreamer-version:
        type: string
      install-dir:
        type: string
        # GStreamer refuses to install to 64bit Program Files
        default: "C:/Program Files (x86)/GStreamer/"
    steps:
      - restore_cache:
          keys:
            - gstreamer-v1-<< parameters.gstreamer-version >>
      - run:
          # Use Powershell to download so we don't have to worry about getting curl or wget installed
          name: "Download GStreamer installer"
          command: |
            $downloadUrl = "https://gstreamer.freedesktop.org/data/pkg/windows/<< parameters.gstreamer-version >>/msvc/gstreamer-1.0-msvc-x86_64-<< parameters.gstreamer-version >>.msi"
            $downloadFile = "$HOME/Downloads/gstreamer.msi"

            If (Test-Path $downloadFile) {
                Write-Host "GStreamer installer restored from cache to $downloadFile"
                Exit
            }

            (new-object System.Net.WebClient).DownloadFile("$downloadUrl", "$downloadFile")
          shell: powershell.exe
          environment:
            DOWNLOAD_URL:
      - run:
          # Why there are backticks: https://stackoverflow.com/a/44499001
          # Also msiexec only works with backslash paths
          name: "Install GStreamer"
          command: |
            If (Test-Path "<< parameters.install-dir >>/*") {
                Write-Host "GStreamer restored from cache to << parameters.install-dir >>"
                Exit
            }

            $msiFile = "$HOME/Downloads/gstreamer.msi".Replace('/', '\')
            $installDir = "`"<< parameters.install-dir >>`"".Replace('/', '\')

            # https://gstreamer.freedesktop.org/documentation/installing/on-windows.html?gi-language=c
            # https://gstreamer.freedesktop.org/documentation/deploying/windows.html
            # https://stackoverflow.com/q/63838725/8134178
            Start-Process msiexec -ArgumentList "/i $msiFile INSTALLDIR=$installDir ALLUSERS=1 Complete=1 /qn" -Wait -Passthru

            If (Test-Path "<< parameters.install-dir >>/*") { Write-Host "GStreamer succesfully installed to << parameters.install-dir >>" }
            Else { Throw "GStreamer was not properly installed to << parameters.install-dir >>" }
          shell: powershell.exe
      - win-add-to-path:
          path: << parameters.install-dir >>/1.0/msvc_x86_64/bin/
      - run:
          name: "Ensure GStreamer properly installed"
          command: gst-inspect-1.0 --gst-version
      - save_cache:
          paths:
            - ~/Downloads/gstreamer.msi
            - << parameters.install-dir >>
          key: gstreamer-v1-<< parameters.gstreamer-version >>

  win-install-gtk:
    parameters:
      gvsbuild-tag:
        description: "Commit hash for https://github.com/wingtk/gvsbuild, which hardcodes dependency versions and does not make releases"
        type: string
      install-dir:
        type: string
        default: "C:/Program Files/GTK3/"
    steps:
      - run:
          name: "Clone gvsbuild repo"
          command: |
            GTK_BUILD_REPO="https://github.com/wingtk/gvsbuild.git"
            DOWNLOAD_DIR="~/Downloads/gvsbuild/"

            git clone ${GTK_BUILD_REPO} ${DOWNLOAD_DIR}
            cd ${DOWNLOAD_DIR}
            git checkout << parameters.gvsbuild-tag >>
      - run:
          name: "Build GTK3"
          command: |
            python build.py build -p x64 gtk3
          working_directory: ~/Downloads/gvsbuild/

  win-install-poetry:
    parameters:
      poetry-version:
        type: string
    steps:
      - restore_cache:
          keys:
            - poetry-v1-<< parameters.poetry-version >>
      - run:
          name: "Install Poetry"
          command: |
            If (Test-Path "~/.poetry") {
                Write-Host "Poetry restored from cache to ~/.poetry"
                Exit
            }

            $poetryVersion = "<< parameters.poetry-version >>"
            $downloadUrl = "https://raw.githubusercontent.com/python-poetry/poetry/$poetryVersion/get-poetry.py"
            (Invoke-WebRequest -Uri $downloadUrl -UseBasicParsing).Content | python - --version $poetryVersion
          shell: powershell.exe
      - bash-add-to-path:
          # get-poetry will add Poetry to Windows Path, but not the path the CircleCI bash uses
          path: ~/.poetry/bin
      - run:
          name: "Ensure Poetry installed and in Path"
          command: poetry --version
      - save_cache:
          paths:
            - ~/.poetry
          key: poetry-v1-<< parameters.poetry-version >>

  win-install-qt:
    parameters:
      qt-version:
        type: string
      install-dir:
        type: string
        default: "C:/Program Files/Qt/"
      arch:
        type: string
        default: win64_msvc2019_64
    steps:
      - restore_cache:
          keys:
            - qt-v0-<< parameters.qt-version >>-<< parameters.arch >>
      - run:
          name: "Install Qt"
          command: |
            if [ -d "<< parameters.install-dir >>" ]; then
                echo "Qt already installed. Skipping"
                exit 0; fi
            pip install aqtinstall
            aqt install --outputdir "<< parameters.install-dir >>" << parameters.qt-version >> windows desktop << parameters.arch >>
      - save_cache:
          paths:
            - << parameters.install-dir >>
          key: qt-v0-<< parameters.qt-version >>-<< parameters.arch >>

  win-install-sys-deps:
    parameters:
      ffmpeg-version:
        type: string
      gstreamer-version:
        type: string
      gvsbuild-tag:
        type: string
      poetry-version:
        type: string
      qt-version:
        type: string
    steps:
      - win-install-qt:
          qt-version: << parameters.qt-version >>
      - win-install-gtk:
          gvsbuild-tag: << parameters.gvsbuild-tag >>
      - win-install-gstreamer:
          gstreamer-version: << parameters.gstreamer-version >>
      - win-install-ffmpeg:
          ffmpeg-version: << parameters.ffmpeg-version >>
      - win-install-poetry:
          poetry-version: << parameters.poetry-version >>
